@using Microsoft.AspNetCore.Components.Web
@using Shadcn.Components.Priv.Cn

<button
    @* Component="@(AsChild ? "span" : "button")" *@
    @* class="@GetButtonClasses() @(AsChild ? "contents" : "")" *@

    class="@GetButtonClasses()"
    disabled="@Disabled"
    type="@Type"
    @attributes="AdditionalAttributes">
    @ChildContent
</button>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public string Class { get; set; } = string.Empty;

    // [Parameter] public bool AsChild { get; set; }
    [Parameter] public string? Variant { get; set; }
    [Parameter] public string? Size { get; set; }
    [Parameter] public string? Type { get; set; } = "button";
    [Parameter] public bool Disabled { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }


    private CVAConfig buttonConfig = new CVAConfig {
            Base = "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
            Variants = new Dictionary<string, Dictionary<string, object>> {
                ["variant"] = new Dictionary<string, object> {
                    ["default"] = "bg-primary text-primary-foreground shadow hover:bg-primary/90",
                    ["destructive"] = "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
                    ["outline"] = "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
                    ["secondary"] = "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
                    ["ghost"] = "hover:bg-accent hover:text-accent-foreground",
                    ["link"] = "text-primary underline-offset-4 hover:underline"
                },
                ["size"] = new Dictionary<string, object> {
                    ["default"] = "h-9 px-4 py-2",
                    ["sm"] = "h-8 rounded-md px-3 text-xs",
                    ["lg"] = "h-10 rounded-md px-8",
                    ["icon"] = "h-9 w-9"
                }
            },
            DefaultVariants = new Dictionary<string, object> {
                ["variant"] = "default",
                ["size"] = "default"
            }
        };

    private string GetButtonClasses() {
        var buttonVariants = DefineConfig.Create().CVA(buttonConfig)(new Dictionary<string, object> {
                ["variant"] = Variant!,
                ["size"] = Size!,
                ["class"] = Class
            });

        return CnHelper.Cn([buttonVariants]);
    }
}
