@namespace Shadcn.Components.Dialog

@inject DialogService DialogService

@code {
    [CascadingParameter] public Dialog? ParentDialog { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }

    private bool IsVisible => DialogService.IsVisible(ParentDialog!.DialogId); // Checando visibilidade do dialogo com base no ParentDialog!.DialogId
}


@* <BodyPortal> *@
    @if (IsVisible) {
        <div onclick="@(() => DialogService.Hide(ParentDialog!.DialogId));" data-state="@(IsVisible ? "open" : "closed")" class="bg-black/80 inset-0 fixed z-50 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0" data-aria-hidden="true" aria-hidden="true" />

        <div role="dialog" data-state="@(IsVisible ? "open" : "closed")" tabindex="-1" class="translate-x-[-50%] translate-y-[-50%] bg-background gap-4 p-6 fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg border shadow-lg duration-200 sm:rounded-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%]" style="pointer-events: auto;" @attributes="AdditionalAttributes">
            @ChildContent
        </div>
    }
@* </BodyPortal> *@

@code {
    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object>? AdditionalAttributes { get; set; } // Atributos adicionais

}
